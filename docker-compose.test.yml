services:
  # Frontend test container
  frontend-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: test
    container_name: valorant-map-picker-frontend-test
    volumes:
      - ./frontend:/app
      - ./test_results:/app/test-results
    environment:
      - NODE_ENV=test
      - CI=true
    command: npm test -- --coverage --no-watch
    networks:
      - web

  # Frontend coverage container
  frontend-coverage:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: test
    container_name: valorant-map-picker-frontend-coverage
    volumes:
      - ./frontend:/app
      - ./test_results/frontend-coverage:/app/coverage
    environment:
      - NODE_ENV=test
      - CI=true
    command: npm test -- --coverage --coverageReporters="html" --no-watch
    networks:
      - web

  # Backend test container
  backend-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
    container_name: valorant-map-picker-backend-test
    volumes:
      - ./backend:/app/backend
      - ./test_results:/app/test_results
    environment:
      - GO_ENV=test
    command: go test -v ./...
    networks:
      - web

  # Backend coverage container
  backend-coverage:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
    container_name: valorant-map-picker-backend-coverage
    volumes:
      - ./backend:/app/backend
      - ./test_results/backend-coverage:/app/coverage
    environment:
      - GO_ENV=test
    command: >
      sh -c "go test -coverprofile=/app/coverage/coverage.out ./... &&
             go tool cover -html=/app/coverage/coverage.out -o /app/coverage/index.html"
    networks:
      - web

  # Backend benchmark container
  backend-benchmark:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
    container_name: valorant-map-picker-backend-benchmark
    volumes:
      - ./backend:/app/backend
      - ./test_results/benchmark:/app/benchmark
    environment:
      - GO_ENV=test
    command: >
      sh -c "go test -bench=. -benchmem ./... | tee /app/benchmark/benchmark_results.txt &&
             echo 'Benchmark results saved to test_results/benchmark/benchmark_results.txt'"
    networks:
      - web

  # End-to-end test container
  e2e-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: e2e
    container_name: valorant-map-picker-e2e-test
    depends_on:
      - frontend-test-server
      - backend-test-server
    volumes:
      - ./frontend:/app
      - ./test_results:/app/test-results
    environment:
      - CYPRESS_baseUrl=http://frontend-test-server
      - CYPRESS_API_URL=http://backend-test-server:3000
    command: npm run test:e2e:ci
    networks:
      - web

  # Frontend test server for e2e tests
  frontend-test-server:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: valorant-map-picker-frontend-test-server
    volumes:
      - ./frontend:/app
    environment:
      - NODE_ENV=test
      - REACT_APP_API_URL=http://backend-test-server:3000
    command: npm start
    networks:
      - web

  # Backend test server for e2e tests
  backend-test-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: valorant-map-picker-backend-test-server
    volumes:
      - ./backend:/app/backend
    environment:
      - VALOMAP_SERVER_PORT=3000
      - VALOMAP_LOGGING_LEVEL=info
      - VALOMAP_LOGGING_FORMAT=json
      - VALOMAP_SECURITY_ALLOWED_ORIGINS=http://frontend-test-server
    command: go run ./backend/cmd/main.go
    networks:
      - web

networks:
  web:
    external: true
